def menu() -> str:
    """
    Exibe o menu de opções do sistema bancário.

    Returns:
        str: A opção escolhida pelo usuário.
    """
    menu = (
        "**** MENU ****\n"
        "[d] Depositar\n"
        "[s] Sacar\n"
        "[e] Extrato\n"
        "[nu] Novo usuário\n"
        "[nc] Nova conta\n"
        "[lc] Listar contas\n"
        "[q] Sair\n"
        "****************\n"
        "=> "
    )
    return input(menu)


def depositar(saldo: float, valor: float, extrato: str) -> tuple:
    """
    Realiza um depósito na conta.

    Args:
        saldo (float): O saldo atual da conta.
        valor (float): O valor a ser depositado.
        extrato (str): O extrato da conta.

    Returns:
        tuple: Uma tupla contendo o novo saldo e o extrato atualizado.
    """
    if valor > 0:
        saldo += valor
        extrato += f"Depósito: R$ {valor:.2f}\n"
        print("=== Depósito realizado com sucesso! ===")
    else:
        print("@@@ Operação falhou! O valor informado é inválido. @@@")
    return saldo, extrato


def sacar(*, saldo: float, valor: float, extrato: str, limite: float, numero_saques: int, limite_saques: int) -> tuple:
    """
    Realiza um saque na conta.

    Args:
        saldo (float): O saldo atual da conta.
        valor (float): O valor a ser sacado.
        extrato (str): O extrato da conta.
        limite (float): O limite de saque por operação.
        numero_saques (int): O número de saques já realizados.
        limite_saques (int): O limite de saques por dia.

    Returns:
        tuple: Uma tupla contendo o novo saldo, o extrato atualizado e o número de saques atualizado.
    """
    excedeu_saldo = valor > saldo
    excedeu_limite = valor > limite
    excedeu_saques = numero_saques >= limite_saques

    if excedeu_saldo:
        print("@@@ Operação falhou! Você não tem saldo suficiente. @@@")

    elif excedeu_limite:
        print("@@@ Operação falhou! O valor do saque excede o limite. @@@")

    elif excedeu_saques:
        print("@@@ Operação falhou! Número máximo de saques excedido. @@@")

    elif valor > 0:
        saldo -= valor
        extrato += f"Saque: R$ {valor:.2f}\n"
        numero_saques += 1
        print("=== Saque realizado com sucesso! ===")

    else:
        print("@@@ Operação falhou! O valor informado é inválido. @@@")

    return saldo, extrato, numero_saques


def exibir_extrato(saldo: float, /, *, extrato: str) -> None:
    """
    Exibe o extrato da conta.

    Args:
        saldo (float): O saldo atual da conta.
        extrato (str): O extrato da conta.
    """
    print("\n****************** EXTRATO ******************")
    print("Não foram realizadas movimentações." if not extrato else extrato)
    print(f"Saldo: R$ {saldo:.2f}")
    print("*********************************************")


def criar_usuario(usuarios: list) -> list:
    """
    Cria um novo usuário.

    Args:
        usuarios: Lista de usuários existentes.

    Returns:
        list: Lista de usuários atualizada, caso o novo usuário seja criado com sucesso.
    """
    cpf = input("Informe o CPF (somente números): ")
    usuario = filtrar_usuario(cpf, usuarios)

    if usuario:
        print("@@@ Já existe usuário com esse CPF! @@@")
        return

    nome = input("Informe o nome completo: ")
    data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
    endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): ")

    usuarios.append({"nome": nome, "data_nascimento": data_nascimento, "cpf": cpf, "endereco": endereco})

    print("=== Usuário criado com sucesso! ===")
    return usuarios


def filtrar_usuario(cpf: str, usuarios: list) -> dict:
    """
    Filtra um usuário na lista de usuários a partir do CPF.

    Args:
        cpf: CPF do usuário a ser filtrado.
        usuarios: Lista de usuários existentes.

    Returns:
        dict: Dicionário contendo os dados do usuário, caso seja encontrado.
    """
    usuarios_filtrados = [usuario for usuario in usuarios if usuario["cpf"] == cpf]
    return usuarios_filtrados[0] if usuarios_filtrados else None


def criar_conta(agencia: str, numero_conta: int, usuarios: list) -> dict:
    """
    Cria uma nova conta bancária, se o usuário existir.

    Args:
        agencia (str): Número da agência bancária.
        numero_conta (int): Número da conta a ser criada.
        usuarios (list): Lista de usuários existentes.

    Returns:
        dict: Dicionário representando a conta bancária criada, se o usuário for encontrado.
    """
    cpf = input("Informe o CPF do usuário (somente número): ")
    usuario = filtrar_usuario(cpf, usuarios)

    if usuario:
        print("=== Conta criada com sucesso! ===")
        return {"agencia": agencia, "numero_conta": numero_conta, "usuario": usuario}
    print("@@@ Usuário não encontrado, fluxo de criação de conta encerrado! @@@")
    return None


def listar_contas(contas: list) -> None:
    """
    Lista as contas bancárias existentes.

    Args:
        contas (list): Lista de contas bancárias.
    """
    for conta in contas:
        linha = f"""\
            Agência:\t{conta['agencia']}
            C/C:\t\t{conta['numero_conta']}
            Titular:\t{conta['usuario']['nome']}
        """
        print(linha)


def main() -> None:
    """
    Função principal do sistema bancário.
    """
    LIMITE_SAQUES = 3
    AGENCIA = "0001"

    saldo = 0
    limite = 500
    extrato = ""
    numero_saques = 0
    usuarios = []
    contas = []

    while True:
        opcao = menu()

        if opcao == "d":
            valor = float(input("Informe o valor do depósito: "))
            saldo, extrato = depositar(saldo, valor, extrato)

        elif opcao == "s":
            valor = float(input("Informe o valor do saque: "))
            saldo, extrato, numero_saques = sacar(
                saldo=saldo,
                valor=valor,
                extrato=extrato,
                limite=limite,
                numero_saques=numero_saques,
                limite_saques=LIMITE_SAQUES,
            )

        elif opcao == "e":
            exibir_extrato(saldo, extrato=extrato)

        elif opcao == "nu":
            criar_usuario(usuarios)

        elif opcao == "nc":
            numero_conta = len(contas) + 1
            conta = criar_conta(AGENCIA, numero_conta, usuarios)

            if conta:
                contas.append(conta)

        elif opcao == "lc":
            listar_contas(contas)

        elif opcao == "q":
            break

        else:
            print("Operação inválida, por favor selecione novamente a operação desejada.")


if __name__ == "__main__":
    main()
